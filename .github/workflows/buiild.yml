# Name of the workflow
name: Build and Deploy 

on:
  # Trigger the workflow on pushes to the 'main' branch
  push:
    branches:
      - main # Or your default branch, e.g., 'master'
    tags:
      - 'v*.*.*' # This will trigger on any tag starting with 'v' followed by dot-separated numbers (e.g., v1.0.0, v2.1.3)
      - '*-rc'   # Example: Trigger on release candidates (e.g., 1.0.0-rc)

  # Trigger the workflow on pull requests targeting the 'main' branch
  pull_request:
    branches:
      - main # Or your default branch, e.g., 'master'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Grant GITHUB_TOKEN the necessary permissions to deploy to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  # BUILD_PATH: "." # default value when not using subfolders
   ASTRO_SOURCE: site-source # The directory where the Astro source files are located
   BUILD_OUTPUT: site # The directory where the built site will be outputted for both astro and gradle
   GRADLE_SOURCE: "." # The directory where the SimC source files are located
   ELECTRON_SOURCE: app # The directory where the SimC source files are located

jobs:
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checkout the repository code
      # This action checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK) 8
      # This action sets up a Java environment, crucial for Gradle.
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8' # Use Eclipse Temurin JDK 8/1.8
          distribution: 'temurin' # Recommended distribution for OpenJDK 8
          cache: 'gradle' # Cache Gradle dependencies for faster builds

      # Step 3: Set up Node.js (LTS version)
      # This action sets up a Node.js environment. We'll use the latest LTS.
      - name: Set up Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*' # Installs the latest LTS Node.js version
          cache: 'npm' # Cache npm dependencies for faster installs
          cache-dependency-path: |
            ${{ env.ASTRO_SOURCE }}/package-lock.json
            app/package-lock.json


      # Step 4: Setup GitHub Pages environment
      # This step configures the GitHub Pages environment and provides outputs needed for Astro build.
      - name: Setup Pages
        id: pages # Assign an ID to this step to reference its outputs
        uses: actions/configure-pages@v5 # Using v5 as seen in the Astro workflow for base_path/origin outputs

      # Step 5: Setup Gradle and Run Gradle tasks
      # This action helps run Gradle commands and can cache Gradle dependencies.
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # Step 6: Install Astro Node.js dependencies and build the site-source project (Astro build)
      # Assumes your Node.js project (with package.json) is in a directory named 'site-source'
      # within the root of your repository.
      - name: ASTRO:Install Node.js dependencies and build Astro site
        run: |
          echo "Installing npm dependencies in ${{ env.ASTRO_SOURCE }}"
          npm ci
          echo "Building site-source project with Astro"
          # Use npx to run astro command and pass GitHub Pages specific site and base paths
          npx --no-install astro build --site "${{ steps.pages.outputs.origin }}" --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.ASTRO_SOURCE }} # Sets the working directory for this step

      # Step 7: Run Gradle build tasks (Simc build)
      # Start build process with gradle
      - name: Build with Gradle
        run: |
          echo "Make gradle wrapper executable..." 
          chmod +x gradlew
          echo "Running Gradle build dry run..."
          gradle build --dry-run 
          echo "Running Gradle compileGwt with verbose output..."
          gradle compileGwt --console verbose --info
          echo "Running Gradle makeSite with verbose output..."
          gradle makeSite --console verbose --info
        working-directory: ${{ env.GRADLE_SOURCE }} # Sets the working directory for this step

      # Step 8: Upload the 'site' directory as a GitHub Pages artifact
      # The 'site' directory is assumed to be generated by 'gradle makeSite' in the root,
      # and should now contain the correctly built Astro assets.
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './${{ env.BUILD_OUTPUT }}' # The path to the directory that will be deployed as GitHub Pages

      # Step 9: Deploy the uploaded artifact to GitHub Pages
      # This action takes the artifact and deploys it to your GitHub Pages site.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # Step 10: Install Electron Node.js dependencies and run publish for the 'app' directory (Electron Build)
      # This step assumes there's a Node.js project in the 'app' directory
      # and that 'npm run publish' will output its artifacts to the main build output directory (e.g., './site').
      - name: ELECTRTON:Install Node.js dependencies and publish Elctron 'app'
        run: |
          echo "Installing npm dependencies in 'app' directory..."
          npm ci # Use 'ci' for clean installs in CI environments
          echo "Running 'npm run publish' in 'app' directory..."
          npm run publish
        working-directory: './${{ env.ELECTRON_SOURCE }}' # Sets the working directory for this step to the 'app' folder