# Name of the workflow
name: Build and Deploy to GitHub Pages

# Controls when the workflow will run
on:
  # Trigger the workflow on pushes to the 'main' branch
  #push:
    #branches:
      #- main # Or your default branch, e.g., 'master'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Grant GITHUB_TOKEN the necessary permissions to deploy to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Step 1: Checkout the repository code
      # This action checks out your repository under $GITHUB_WORKSPACE, so your workflow can access it.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Java Development Kit (JDK) 8
      # This action sets up a Java environment, crucial for Gradle.
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin' # Recommended distribution for OpenJDK 8
          cache: 'gradle' # Cache Gradle dependencies for faster builds

      # Step 3: Set up Node.js (LTS version)
      # This action sets up a Node.js environment. We'll use the latest LTS.
      - name: Set up Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*' # Installs the latest LTS Node.js version
          cache: 'npm' # Cache npm dependencies for faster installs

      # Step 4: Install Node.js dependencies and build the site-source project
      # Assumes your Node.js project (with package.json) is in a directory named 'site-source'
      # within the root of your repository.
      - name: Install Node.js dependencies and build
        run: |
          echo "Installing npm dependencies in site-source/"
          cd site-source
          npm install
          echo "Building site-source project"
          npm run build
        # Optionally, you can set `working-directory: site-source` here, but `cd` is fine for simple cases.

      # Step 5: Run Gradle tasks
      # This action helps run Gradle commands and can cache Gradle dependencies.
      - name: Run Gradle builds
        uses: gradle/gradle-build-action@v2
        with:
          arguments: compileGwt makeSite # Runs both Gradle tasks

      # Step 6: Setup GitHub Pages environment
      # This step configures the GitHub Pages environment.
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Step 7: Upload the 'site' directory as a GitHub Pages artifact
      # The 'site' directory is assumed to be generated by 'gradle makeSite' in the root.
      # This artifact will be used by the deploy-pages action.
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './site' # The path to the directory that will be deployed as GitHub Pages

      # Step 8: Deploy the uploaded artifact to GitHub Pages
      # This action takes the artifact and deploys it to your GitHub Pages site.
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
