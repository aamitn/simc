---
---

<section id="home" class="relative min-h-screen flex items-center justify-center overflow-hidden">
  <!-- Background Circuit Pattern -->
  <div class="absolute inset-0 bg-circuit-pattern opacity-10"></div>
  
  <!-- Animated Circuit Simulation Background -->
  <div class="absolute inset-0" id="circuit-simulation">
    <!-- Dynamic Circuit Paths -->
    <svg class="absolute inset-0 w-full h-full" id="circuit-paths">
      <defs>
        <linearGradient id="currentFlow" x1="0%" y1="0%" x2="100%" y2="0%">
          <stop offset="0%" style="stop-color:#00D9FF;stop-opacity:0"/>
          <stop offset="50%" style="stop-color:#00D9FF;stop-opacity:1"/>
          <stop offset="100%" style="stop-color:#00D9FF;stop-opacity:0"/>
        </linearGradient>
        <filter id="glow">
          <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
          <feMerge> 
            <feMergeNode in="coloredBlur"/>
            <feMergeNode in="SourceGraphic"/>
          </feMerge>
        </filter>
      </defs>
      
      <!-- Horizontal Circuit Lines -->
      <line x1="0" y1="20%" x2="100%" y2="20%" stroke="#00D9FF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-1"/>
      <line x1="0" y1="40%" x2="100%" y2="40%" stroke="#8B5FBF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-2"/>
      <line x1="0" y1="60%" x2="100%" y2="60%" stroke="#00FF94" stroke-width="2" opacity="0.3" class="circuit-line" id="line-3"/>
      <line x1="0" y1="80%" x2="100%" y2="80%" stroke="#00D9FF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-4"/>
      
      <!-- Vertical Circuit Lines -->
      <line x1="20%" y1="0" x2="20%" y2="100%" stroke="#8B5FBF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-v1"/>
      <line x1="50%" y1="0" x2="50%" y2="100%" stroke="#00D9FF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-v2"/>
      <line x1="80%" y1="0" x2="80%" y2="100%" stroke="#00FF94" stroke-width="2" opacity="0.3" class="circuit-line" id="line-v3"/>
      
      <!-- Current Flow Indicators -->
      <circle cx="10%" cy="20%" r="4" fill="url(#currentFlow)" class="current-indicator" id="current-1"/>
      <circle cx="30%" cy="40%" r="4" fill="url(#currentFlow)" class="current-indicator" id="current-2"/>
      <circle cx="70%" cy="60%" r="4" fill="url(#currentFlow)" class="current-indicator" id="current-3"/>
      <circle cx="90%" cy="80%" r="4" fill="url(#currentFlow)" class="current-indicator" id="current-4"/>
    </svg>
    
    <!-- Interactive Circuit Components -->
    <div class="circuit-component resistor absolute top-1/4 left-1/4" id="resistor-1">
      <div class="w-12 h-6 border-2 border-circuit-blue bg-transparent rounded-sm flex items-center justify-center">
        <div class="w-8 h-1 bg-circuit-blue opacity-60"></div>
      </div>
    </div>
    
    <div class="circuit-component capacitor absolute top-1/2 right-1/4" id="capacitor-1">
      <div class="flex items-center space-x-1">
        <div class="w-1 h-8 bg-circuit-purple"></div>
        <div class="w-1 h-8 bg-circuit-purple"></div>
      </div>
    </div>
    
    <div class="circuit-component transistor absolute bottom-1/4 left-1/3" id="transistor-1">
      <div class="w-8 h-8 border-2 border-circuit-green bg-transparent rounded-full flex items-center justify-center">
        <div class="w-2 h-2 bg-circuit-green rounded-full"></div>
      </div>
    </div>
    
    <!-- Oscilloscope Waveform -->
    <div class="absolute top-20 right-20 w-64 h-40 border-2 border-circuit-blue/50 rounded-lg bg-dark-bg/80 shadow-lg shadow-circuit-blue/20" id="oscilloscope">
      <svg class="w-full h-full" viewBox="0 0 128 80">
        <path d="M 0,40 Q 16,20 32,40 T 64,40 T 96,40 T 128,40" 
              stroke="#00D9FF" 
              stroke-width="3" 
              fill="none" 
              class="waveform" 
              id="sine-wave"/>
        <circle cx="10" cy="40" r="3" fill="#00FF94" class="signal-dot" id="signal-1"/>
        <circle cx="32" cy="40" r="3" fill="#8B5FBF" class="signal-dot" id="signal-2"/>
        <circle cx="64" cy="40" r="3" fill="#00D9FF" class="signal-dot" id="signal-3"/>
      </svg>
    </div>
    
    <!-- Voltage Indicators -->
    <div class="absolute bottom-10 left-10 space-y-2" id="voltage-indicators">
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-circuit-blue rounded-full animate-pulse"></div>
        <span class="text-xs text-circuit-blue font-mono" id="voltage-1">5.0V</span>
      </div>
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-circuit-purple rounded-full animate-pulse"></div>
        <span class="text-xs text-circuit-purple font-mono" id="voltage-2">3.3V</span>
      </div>
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-circuit-green rounded-full animate-pulse"></div>
        <span class="text-xs text-circuit-green font-mono" id="voltage-3">1.8V</span>
      </div>
    </div>
  </div>
  
  <!-- Main Content -->
  <div class="container mx-auto px-6 text-center relative z-10">
    <div class="max-w-4xl mx-auto">
      <!-- Headline -->
      <h1 class="text-5xl md:text-7xl font-bold mb-6 leading-tight" id="hero-title">
        <span class="bg-gradient-to-r from-circuit-blue via-circuit-purple to-circuit-green bg-clip-text text-transparent">
          Revolutionary
        </span>
        <br>
        <span class="text-indigo-400 dark:text-white text-text-primary-light">Circuit Simulation</span>
      </h1>
      
      <!-- Subheading -->
      <p class="text-xl md:text-2xl text-text-secondary dark:text-text-secondary text-text-secondary-light mb-8 max-w-2xl mx-auto leading-relaxed" id="hero-subtitle">
        Design, simulate, and optimize electronic circuits with our cutting-edge platform. 
        Experience the future of circuit design today.
      </p>
      
      <!-- CTA Buttons -->
      <div class="flex flex-col sm:flex-row items-center justify-center gap-4 mb-12" id="hero-cta">
        <button class="px-8 py-4 bg-gradient-to-r from-circuit-blue to-circuit-purple text-white font-semibold rounded-lg text-lg hover:shadow-xl hover:shadow-circuit-blue/30 transition-all duration-300 transform hover:scale-105" id="launch-btn">
          <span class="flex items-center">
            <i data-feather="play-circle" class="w-5 h-5 mr-2"></i>
            Launch Now
          </span>
        </button>
        <button class="px-8 py-4 border-2 border-circuit-blue text-circuit-blue font-semibold rounded-lg text-lg hover:bg-circuit-blue hover:text-dark-bg transition-all duration-300" id="download-btn">
          <span class="flex items-center">
            <i data-feather="download-cloud" class="w-5 h-5 mr-2"></i>
            Download App
          </span>
        </button>
      </div>
      
    <!-- Interactive Metrics Display -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-3xl mx-auto" id="hero-metrics">
      <!-- Frequency Monitor -->
    <div class="metric-card p-6 rounded-lg backdrop-blur-sm
                dark:bg-dark-bg/30 bg-white/30 
                dark:border-circuit-blue/30 border-circuit-blue/20 
                border shadow-lg 
                dark:shadow-circuit-blue/10 shadow-circuit-blue/5
                transition-all duration-300">
        <div class="relative h-24">
          <svg class="w-full h-full" viewBox="0 0 100 50">
            <path class="frequency-wave" 
                  d="M 0,25 Q 12.5,10 25,25 T 50,25 T 75,25 T 100,25" 
                  stroke="#00D9FF" 
                  stroke-width="2" 
                  fill="none"/>
          </svg>
          <div class="absolute top-0 left-0 w-full h-full flex items-center justify-center">
            <span class="text-2xl font-mono text-circuit-blue">1.5 MHz</span>
          </div>
        </div>
        <div class="text-center mt-4 text-text-secondary">Clock Speed</div>
      </div>

      <!-- Power Usage -->
    <div class="metric-card p-6 rounded-lg backdrop-blur-sm
                dark:bg-dark-bg/30 bg-white/30 
                dark:border-circuit-blue/30 border-circuit-blue/20 
                border shadow-lg 
                dark:shadow-circuit-blue/10 shadow-circuit-blue/5
                transition-all duration-300">
        <div class="relative h-24">
          <div class="power-meter flex items-end justify-around h-full pb-2">
            {Array.from({ length: 8 }).map((_, i) => (
              <div class="power-bar w-2 bg-circuit-purple/30 rounded-t"
                  style={`height: ${Math.random() * 100}%`}></div>
            ))}
          </div>
          <div class="absolute top-0 left-0 w-full h-full flex items-center justify-center">
            <span class="text-2xl font-mono text-circuit-purple">2.4 W</span>
          </div>
        </div>
        <div class="text-center mt-4 text-text-secondary">Power Usage</div>
      </div>

      <!-- Temperature Monitor -->
    <div class="metric-card p-6 rounded-lg backdrop-blur-sm
                dark:bg-dark-bg/30 bg-white/30 
                dark:border-circuit-blue/30 border-circuit-blue/20 
                border shadow-lg 
                dark:shadow-circuit-blue/10 shadow-circuit-blue/5
                transition-all duration-300">
        <div class="relative h-24">
          <svg class="w-full h-full" viewBox="0 0 100 50">
            <circle class="temp-ring" 
                    cx="50" cy="25" r="20" 
                    stroke="#00FF94" 
                    stroke-width="4" 
                    stroke-dasharray="125.6" 
                    stroke-dashoffset="31.4" 
                    fill="none"/>
            <text x="50" y="25" 
                  text-anchor="middle" 
                  dominant-baseline="middle" 
                  fill="#00FF94" 
                  class="text-lg font-mono">
              27Â°C
            </text>
          </svg>
        </div>
        <div class="text-center mt-4 text-text-secondary">Core Temp</div>
      </div>
    </div>

    </div>
  </div>
  
  <!-- Scroll Indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2" id="scroll-indicator">
    <div class="w-6 h-10 border-2 border-circuit-blue rounded-full flex justify-center">
      <div class="w-1 h-3 bg-circuit-blue rounded-full mt-2 animate-bounce"></div>
    </div>
  </div>
</section>

<script>
    // Add click handlers for the buttons
  document.getElementById('launch-btn')?.addEventListener('click', () => {
    window.location.href = './circuitjs.html';
  });

  document.getElementById('download-btn')?.addEventListener('click', () => {
    window.location.href = './#downloads';
  });

  // Counter animation for stats
  function animateCounter(element: HTMLElement, target: number) {
    let current = 0;
    const increment = target / 100;
    const timer = setInterval(() => {
      current += increment;
      if (current >= target) {
        element.textContent = target.toLocaleString();
        clearInterval(timer);
      } else {
        element.textContent = Math.floor(current).toLocaleString();
      }
    }, 20);
  }

  // Initialize counter animations when hero section is in view
  const heroSection = document.getElementById('home');
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        document.querySelectorAll('[data-count]').forEach(counter => {
          const target = parseInt(counter.getAttribute('data-count') || '0');
          animateCounter(counter as HTMLElement, target);
        });
        observer.unobserve(entry.target);
      }
    });
  });

  if (heroSection) {
    observer.observe(heroSection);
  }
</script>
<script>
  import gsap from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';
  gsap.registerPlugin(ScrollTrigger);

  // Button handlers
  document.getElementById('launch-btn')?.addEventListener('click', () => {
    window.location.href = './circuitjs.html';
  });

  document.getElementById('download-btn')?.addEventListener('click', () => {
    window.location.href = './#downloads';
  });

  // Animate stats with GSAP instead of custom counter
  const animateStats = () => {
    document.querySelectorAll('[data-count]').forEach(counter => {
      const target = parseInt(counter.getAttribute('data-count') || '0');
      gsap.from(counter, {
        textContent: 0,
        duration: 2,
        ease: "power1.inOut",
        snap: { textContent: 1 },
        stagger: {
          each: 0.2
        },
        scrollTrigger: {
          trigger: counter,
          start: "top 80%"
        }
      });
    });
  };

  // Animate circuit elements
  const animateCircuit = () => {
    // Animate current indicators
    gsap.to('.current-indicator', {
      x: "300%",
      duration: 2,
      ease: "none",
      repeat: -1,
      stagger: {
        each: 0.5,
        from: "start"
      }
    });

    // Pulse effect for circuit components
    gsap.to(['.resistor', '.capacitor', '.transistor'], {
      scale: 1.1,
      duration: 1,
      ease: "sine.inOut",
      repeat: -1,
      yoyo: true,
      stagger: {
        each: 0.3
      }
    });

    // Animate circuit lines
    gsap.to('.circuit-line', {
      opacity: 0.6,
      duration: 1,
      ease: "sine.inOut",
      repeat: -1,
      yoyo: true,
      stagger: {
        each: 0.1
      }
    });
  };

  const animateOscilloscope = () => {
  // Animate the sine wave
  gsap.to('#sine-wave', {
    attr: {
      d: 'M 0,40 Q 16,60 32,20 T 64,60 T 96,20 T 128,40'
    },
    duration: 2,
    repeat: -1,
    yoyo: true,
    ease: 'sine.inOut'
  });

  // Animate the signal dots
  gsap.to('.signal-dot', {
    cy: gsap.utils.wrap([35, 45]),
    duration: 1,
    repeat: -1,
    yoyo: true,
    stagger: {
      each: 0.3,
      from: 'start'
    },
    ease: 'sine.inOut'
  });

  // Pulse effect for dots
  gsap.to('.signal-dot', {
    attr: { r: 3 },
    opacity: 0.7,
    duration: 0.8,
    repeat: -1,
    yoyo: true,
    stagger: {
      each: 0.2
    }
  });

  // Add oscilloscope glow effect
  gsap.to('#oscilloscope', {
    boxShadow: '0 0 10px rgba(0, 217, 255, 0.3)',
    duration: 2,
    repeat: -1,
    yoyo: true,
    ease: 'sine.inOut'
  });
};

// Add noise effect to make it more realistic
const addNoiseEffect = () => {
  const noise = () => {
    const wave = document.getElementById('sine-wave');
    if (!wave) return;
    
    const noiseAmount = 2;
    const baseY = 40;
    const points = Array.from({length: 5}, (_, i) => {
      const x = i * 32;
      const y = baseY + (Math.random() - 0.5) * noiseAmount;
      return i === 0 ? `M 0,${y}` : `T ${x},${y}`;
    }).join(' ');
    
    wave.setAttribute('d', points);
    requestAnimationFrame(noise);
  };
  
  noise();
};

const animateVoltages = () => {
  // Base voltages
  const voltages = {
    v1: { base: 5.0, variation: 0.2 },
    v2: { base: 3.3, variation: 0.15 },
    v3: { base: 1.8, variation: 0.1 }
  };

  // Create random voltage fluctuations
  const updateVoltage = (id: string, baseVoltage: number, variation: number) => {
    const voltage = baseVoltage + (Math.random() - 0.5) * variation;
    const element = document.getElementById(id);
    if (element) {
      // Add color intensity based on voltage variation
      const normalizedVariation = Math.abs((voltage - baseVoltage) / variation);
      const opacity = 0.3 + normalizedVariation * 0.7;
      
      gsap.to(element, {
        innerHTML: `${voltage.toFixed(2)}V`,
        duration: 0.5,
        ease: "power1.out",
        onComplete: () => {
          // Add glitch effect when voltage spikes
          if (Math.random() > 0.9) {
            gsap.to(element, {
              skewX: 20,
              duration: 0.1,
              yoyo: true,
              repeat: 1,
              ease: "power1.inOut"
            });
          }
        }
      });

      // Animate the indicator dot
      const dot = element.previousElementSibling;
      if (dot) {
        gsap.to(dot, {
          scale: 1 + normalizedVariation,
          opacity: opacity,
          duration: 0.5,
          ease: "power1.out"
        });
      }
    }
  };

  // Create a timeline for coordinated animations
  const tl = gsap.timeline({
    repeat: -1,
    onRepeat: () => {
      // Occasionally add a voltage surge
      if (Math.random() > 0.95) {
        const surgeVoltage = voltages.v1.base * 1.5;
        gsap.to("#voltage-1", {
          innerHTML: `${surgeVoltage.toFixed(2)}V`,
          color: "#FF0000",
          duration: 0.2,
          yoyo: true,
          repeat: 1,
          onComplete: () => {
            gsap.to("#voltage-1", { color: "#00D9FF", duration: 0.5 });
          }
        });
      }
    }
  });

  // Update voltages periodically
  const updateLoop = () => {
    updateVoltage("voltage-1", voltages.v1.base, voltages.v1.variation);
    updateVoltage("voltage-2", voltages.v2.base, voltages.v2.variation);
    updateVoltage("voltage-3", voltages.v3.base, voltages.v3.variation);
    
    // Schedule next update
    gsap.delayedCall(0.5 + Math.random() * 0.5, updateLoop);
  };

  // Start the animation
  updateLoop();

  // Add hover interaction
  document.querySelectorAll('[id^="voltage-"]').forEach(element => {
    element.addEventListener('mouseenter', () => {
      gsap.to(element, {
        scale: 1.2,
        duration: 0.3,
        ease: "back.out(1.7)"
      });
    });

    element.addEventListener('mouseleave', () => {
      gsap.to(element, {
        scale: 1,
        duration: 0.3,
        ease: "back.out(1.7)"
      });
    });
  });
};
const updatePowerBars = () => {
  const bars = document.querySelectorAll('.power-bar');
  bars.forEach(bar => {
    gsap.to(bar, {
      height: `${30 + Math.random() * 70}%`,
      duration: 1,
      ease: 'power1.inOut'
    });
  });
};

const animateMetrics = () => {
  // Animate frequency wave
  gsap.to('.frequency-wave', {
    attr: { d: 'M 0,25 Q 12.5,40 25,25 T 50,25 T 75,25 T 100,25' },
    duration: 1,
    repeat: -1,
    yoyo: true,
    ease: 'sine.inOut'
  });

  // Update power bars periodically
  setInterval(updatePowerBars, 2000);

  // Animate temperature ring
  gsap.to('.temp-ring', {
    strokeDashoffset: '-125.6',
    duration: 4,
    repeat: -1,
    ease: 'none'
  });
};

  // Initialize animations
  window.addEventListener('load', () => {
    animateStats();
    animateCircuit();
    animateOscilloscope();
    addNoiseEffect();
    animateVoltages();
    animateMetrics();
  });
</script>

<style>
  #oscilloscope {
    backdrop-filter: blur(4px);
    transform: scale(1);
    transition: transform 0.3s ease;
  }

  #oscilloscope:hover {
    transform: scale(1.05);
  }

  .waveform {
    filter: drop-shadow(0 0 4px rgba(0, 217, 255, 0.7));
  }

  .signal-dot {
    filter: drop-shadow(0 0 5px currentColor);
  }

  .metric-card {
  transform: translateY(0);
  transition: all 0.3s ease;
}

.metric-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px -5px rgba(0, 217, 255, 0.2);
}

.power-bar {
  transition: height 0.5s ease;
}

.frequency-wave {
  animation: waveFlow 2s linear infinite;
}

.temp-ring {
  transform-origin: center;
  animation: ringRotate 4s linear infinite;
}

@keyframes waveFlow {
  0% { transform: translateX(0); }
  100% { transform: translateX(-25%); }
}

@keyframes ringRotate {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}
</style>