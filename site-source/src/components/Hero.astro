---
---

<section id="home" class="relative min-h-screen flex items-center justify-center overflow-hidden">
  <!-- Background Circuit Pattern -->
  <div class="absolute inset-0 bg-circuit-pattern opacity-10"></div>
  
  <!-- Animated Circuit Simulation Background -->
  <div class="absolute inset-0" id="circuit-simulation">
    <!-- Dynamic Circuit Paths -->
    <svg class="absolute inset-0 w-full h-full" id="circuit-paths">
      <defs>
        <linearGradient id="currentFlow" x1="0%" y1="0%" x2="100%" y2="0%">
          <stop offset="0%" style="stop-color:#00D9FF;stop-opacity:0"/>
          <stop offset="50%" style="stop-color:#00D9FF;stop-opacity:1"/>
          <stop offset="100%" style="stop-color:#00D9FF;stop-opacity:0"/>
        </linearGradient>
        <filter id="glow">
          <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
          <feMerge> 
            <feMergeNode in="coloredBlur"/>
            <feMergeNode in="SourceGraphic"/>
          </feMerge>
        </filter>
      </defs>
      
      <!-- Horizontal Circuit Lines -->
      <line x1="0" y1="20%" x2="100%" y2="20%" stroke="#00D9FF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-1"/>
      <line x1="0" y1="40%" x2="100%" y2="40%" stroke="#8B5FBF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-2"/>
      <line x1="0" y1="60%" x2="100%" y2="60%" stroke="#00FF94" stroke-width="2" opacity="0.3" class="circuit-line" id="line-3"/>
      <line x1="0" y1="80%" x2="100%" y2="80%" stroke="#00D9FF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-4"/>
      
      <!-- Vertical Circuit Lines -->
      <line x1="20%" y1="0" x2="20%" y2="100%" stroke="#8B5FBF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-v1"/>
      <line x1="50%" y1="0" x2="50%" y2="100%" stroke="#00D9FF" stroke-width="2" opacity="0.3" class="circuit-line" id="line-v2"/>
      <line x1="80%" y1="0" x2="80%" y2="100%" stroke="#00FF94" stroke-width="2" opacity="0.3" class="circuit-line" id="line-v3"/>
      
      <!-- Current Flow Indicators -->
      <circle cx="10%" cy="20%" r="4" fill="url(#currentFlow)" class="current-indicator" id="current-1"/>
      <circle cx="30%" cy="40%" r="4" fill="url(#currentFlow)" class="current-indicator" id="current-2"/>
      <circle cx="70%" cy="60%" r="4" fill="url(#currentFlow)" class="current-indicator" id="current-3"/>
      <circle cx="90%" cy="80%" r="4" fill="url(#currentFlow)" class="current-indicator" id="current-4"/>
    </svg>
    
    <!-- Interactive Circuit Components -->
    <div class="circuit-component resistor absolute top-1/4 left-1/4" id="resistor-1">
      <div class="w-12 h-6 border-2 border-circuit-blue bg-transparent rounded-sm flex items-center justify-center">
        <div class="w-8 h-1 bg-circuit-blue opacity-60"></div>
      </div>
    </div>
    
    <div class="circuit-component capacitor absolute top-1/2 right-1/4" id="capacitor-1">
      <div class="flex items-center space-x-1">
        <div class="w-1 h-8 bg-circuit-purple"></div>
        <div class="w-1 h-8 bg-circuit-purple"></div>
      </div>
    </div>
    
    <div class="circuit-component transistor absolute bottom-1/4 left-1/3" id="transistor-1">
      <div class="w-8 h-8 border-2 border-circuit-green bg-transparent rounded-full flex items-center justify-center">
        <div class="w-2 h-2 bg-circuit-green rounded-full"></div>
      </div>
    </div>
    
    <!-- Oscilloscope Waveform -->
    <div class="absolute top-10 right-10 w-32 h-20 border border-circuit-blue/30 rounded bg-dark-bg/50" id="oscilloscope">
      <svg class="w-full h-full" viewBox="0 0 128 80">
        <path d="M 0,40 Q 16,20 32,40 T 64,40 T 96,40 T 128,40" 
              stroke="#00D9FF" 
              stroke-width="2" 
              fill="none" 
              class="waveform" 
              id="sine-wave"/>
        <circle cx="10" cy="40" r="2" fill="#00FF94" class="signal-dot" id="signal-1"/>
        <circle cx="32" cy="40" r="2" fill="#8B5FBF" class="signal-dot" id="signal-2"/>
        <circle cx="64" cy="40" r="2" fill="#00D9FF" class="signal-dot" id="signal-3"/>
      </svg>
    </div>
    
    <!-- Voltage Indicators -->
    <div class="absolute bottom-10 left-10 space-y-2" id="voltage-indicators">
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-circuit-blue rounded-full animate-pulse"></div>
        <span class="text-xs text-circuit-blue font-mono" id="voltage-1">5.0V</span>
      </div>
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-circuit-purple rounded-full animate-pulse"></div>
        <span class="text-xs text-circuit-purple font-mono" id="voltage-2">3.3V</span>
      </div>
      <div class="flex items-center space-x-2">
        <div class="w-3 h-3 bg-circuit-green rounded-full animate-pulse"></div>
        <span class="text-xs text-circuit-green font-mono" id="voltage-3">1.8V</span>
      </div>
    </div>
  </div>
  
  <!-- Main Content -->
  <div class="container mx-auto px-6 text-center relative z-10">
    <div class="max-w-4xl mx-auto">
      <!-- Headline -->
      <h1 class="text-5xl md:text-7xl font-bold mb-6 leading-tight" id="hero-title">
        <span class="bg-gradient-to-r from-circuit-blue via-circuit-purple to-circuit-green bg-clip-text text-transparent">
          Revolutionary
        </span>
        <br>
        <span class="text-white dark:text-white text-text-primary-light">Circuit Simulation</span>
      </h1>
      
      <!-- Subheading -->
      <p class="text-xl md:text-2xl text-text-secondary dark:text-text-secondary text-text-secondary-light mb-8 max-w-2xl mx-auto leading-relaxed" id="hero-subtitle">
        Design, simulate, and optimize electronic circuits with our cutting-edge platform. 
        Experience the future of circuit design today.
      </p>
      
      <!-- CTA Buttons -->
      <div class="flex flex-col sm:flex-row items-center justify-center gap-4 mb-12" id="hero-cta">
        <button class="px-8 py-4 bg-gradient-to-r from-circuit-blue to-circuit-purple text-white font-semibold rounded-lg text-lg hover:shadow-xl hover:shadow-circuit-blue/30 transition-all duration-300 transform hover:scale-105" id="launch-btn">
          <span class="flex items-center">
            <i data-feather="play" class="w-5 h-5 mr-2"></i>
            Launch Now
          </span>
        </button>
        <button class="px-8 py-4 border-2 border-circuit-blue text-circuit-blue font-semibold rounded-lg text-lg hover:bg-circuit-blue hover:text-dark-bg transition-all duration-300" id="demo-btn">
          <span class="flex items-center">
            <i data-feather="video" class="w-5 h-5 mr-2"></i>
            Watch Demo
          </span>
        </button>
      </div>
      
      <!-- Stats -->
      <div class="grid grid-cols-1 md:grid-cols-3 gap-8 max-w-2xl mx-auto" id="hero-stats">
        <div class="stat-item">
          <div class="text-3xl font-bold text-circuit-blue mb-2" data-count="10000">0</div>
          <div class="text-text-secondary dark:text-text-secondary text-text-secondary-light">Active Users</div>
        </div>
        <div class="stat-item">
          <div class="text-3xl font-bold text-circuit-purple mb-2" data-count="500">0</div>
          <div class="text-text-secondary dark:text-text-secondary text-text-secondary-light">Components</div>
        </div>
        <div class="stat-item">
          <div class="text-3xl font-bold text-circuit-green mb-2" data-count="1000000">0</div>
          <div class="text-text-secondary dark:text-text-secondary text-text-secondary-light">Simulations Run</div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Scroll Indicator -->
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2" id="scroll-indicator">
    <div class="w-6 h-10 border-2 border-circuit-blue rounded-full flex justify-center">
      <div class="w-1 h-3 bg-circuit-blue rounded-full mt-2 animate-bounce"></div>
    </div>
  </div>
</section>

<script>
  // Counter animation for stats
  function animateCounter(element: HTMLElement, target: number) {
    let current = 0;
    const increment = target / 100;
    const timer = setInterval(() => {
      current += increment;
      if (current >= target) {
        element.textContent = target.toLocaleString();
        clearInterval(timer);
      } else {
        element.textContent = Math.floor(current).toLocaleString();
      }
    }, 20);
  }

  // Initialize counter animations when hero section is in view
  const heroSection = document.getElementById('home');
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        document.querySelectorAll('[data-count]').forEach(counter => {
          const target = parseInt(counter.getAttribute('data-count') || '0');
          animateCounter(counter as HTMLElement, target);
        });
        observer.unobserve(entry.target);
      }
    });
  });

  if (heroSection) {
    observer.observe(heroSection);
  }
</script>
